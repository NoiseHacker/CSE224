// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: sortlog/sortlog.proto

package sortlog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobeSort_Ping_FullMethodName       = "/sortlog.GlobeSort/Ping"
	GlobeSort_SendRecord_FullMethodName = "/sortlog.GlobeSort/SendRecord"
	GlobeSort_Close_FullMethodName      = "/sortlog.GlobeSort/Close"
)

// GlobeSortClient is the client API for GlobeSort service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobeSortClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SendRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error)
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error)
}

type globeSortClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobeSortClient(cc grpc.ClientConnInterface) GlobeSortClient {
	return &globeSortClient{cc}
}

func (c *globeSortClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GlobeSort_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globeSortClient) SendRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, GlobeSort_SendRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globeSortClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, GlobeSort_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobeSortServer is the server API for GlobeSort service.
// All implementations must embed UnimplementedGlobeSortServer
// for forward compatibility.
type GlobeSortServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	SendRecord(context.Context, *Record) (*Ack, error)
	Close(context.Context, *Empty) (*Ack, error)
	mustEmbedUnimplementedGlobeSortServer()
}

// UnimplementedGlobeSortServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobeSortServer struct{}

func (UnimplementedGlobeSortServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGlobeSortServer) SendRecord(context.Context, *Record) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRecord not implemented")
}
func (UnimplementedGlobeSortServer) Close(context.Context, *Empty) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedGlobeSortServer) mustEmbedUnimplementedGlobeSortServer() {}
func (UnimplementedGlobeSortServer) testEmbeddedByValue()                   {}

// UnsafeGlobeSortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobeSortServer will
// result in compilation errors.
type UnsafeGlobeSortServer interface {
	mustEmbedUnimplementedGlobeSortServer()
}

func RegisterGlobeSortServer(s grpc.ServiceRegistrar, srv GlobeSortServer) {
	// If the following call pancis, it indicates UnimplementedGlobeSortServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobeSort_ServiceDesc, srv)
}

func _GlobeSort_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobeSortServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobeSort_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobeSortServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobeSort_SendRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobeSortServer).SendRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobeSort_SendRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobeSortServer).SendRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobeSort_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobeSortServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobeSort_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobeSortServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobeSort_ServiceDesc is the grpc.ServiceDesc for GlobeSort service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobeSort_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sortlog.GlobeSort",
	HandlerType: (*GlobeSortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GlobeSort_Ping_Handler,
		},
		{
			MethodName: "SendRecord",
			Handler:    _GlobeSort_SendRecord_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _GlobeSort_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sortlog/sortlog.proto",
}
